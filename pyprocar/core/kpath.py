# -*- coding: utf-8 -*-


import numpy as np
import pyvista


class KPath:
    def __init__(
        self, knames=None, special_kpoints=None, ngrids=None, has_time_reversal=True,
    ):
        latex = "$"
        for x in knames:
            if "$" in x[0] or "$" in x[1]:
                latex = ""
        self.knames = [[latex + x[0] + latex, latex + x[1] + latex] for x in knames]
        self.special_kpoints = special_kpoints
        self.ngrids = ngrids
        self.has_time_reversal = has_time_reversal

    @property
    def nsegments(self):
        return len(self.knames)

    @property
    def tick_positions(self):
        pos = 0
        tick_positions = [pos]
        for isegment in range(self.nsegments):
            pos += self.ngrids[isegment]
            tick_positions.append(pos - 1)
        return tick_positions

    @property
    def tick_names(self):
        tick_names = [self.knames[0][0], self.knames[0][1]]
        for isegment in range(1, self.nsegments):
            if self.knames[isegment][0] != tick_names[-1]:
                tick_names[-1] += "|" + self.knames[isegment][0]
            else:
                tick_names.append(self.knames[isegment][1])
        tick_names.append(self.knames[-1][-1])
        return tick_names

    def get_kpoints_transformed(
        self, transformation_matrix,
    ):
        """

        Parameters
        ----------
        transformation_matrix : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """

        new_special_kpoints = np.dot(self.special_kpoints, transformation_matrix)
        for isegment in range(self.nsegments):
            kstart = new_special_kpoints[isegment][0]
            kend = new_special_kpoints[isegment][1]
            distance = kend - kstart
            direction = [int(x) for x in distance * 100]
            direction /= np.gcd.reduce(direction)

            if np.linalg.norm(distance) > np.linalg.norm(direction / 2):
                new_special_kpoints[isegment][1] = kstart + direction / 2
            # new_special_kpoints[isegment][1] = kstart + direction
        return KPath(
            knames=self.knames, special_kpoints=new_special_kpoints, ngrids=self.ngrids
        )

    def write_to_file(self, filename="KPOINTS", code="vasp"):
        wf = open(filename, "w")
        if code == "vasp":
            wf.write("! Generated by pyprocar\n")
            if len(np.unique(self.ngrids)) == 1:
                wf.write(str(self.ngrids[0]) + "\n")
            else:
                wf.write("   ".join([str(x) for x in self.ngrids]) + "\n")
            wf.write("Line-mode\n")
            wf.write("reciprocal\n")
            for isegment in range(self.nsegments):
                wf.write(
                    " ".join(
                        [
                            "  {:8.4f}".format(x)
                            for x in self.special_kpoints[isegment][0]
                        ]
                    )
                    + "   ! "
                    + self.knames[isegment][0].replace("$", "")
                    + "\n"
                )
                wf.write(
                    " ".join(
                        [
                            "  {:8.4f}".format(x)
                            for x in self.special_kpoints[isegment][1]
                        ]
                    )
                    + "   ! "
                    + self.knames[isegment][1].replace("$", "")
                    + "\n"
                )
                wf.write("\n")
        wf.close()
